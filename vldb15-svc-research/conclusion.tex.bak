\vspace{-1em}
\section{Related Work}\label{related}
\vspace{-.3em}

%Addressing the cost of materialized view maintenance is the subject of many recent papers, which
%focus on various perspectives including complex analytical queries~\cite{nikolic2014linview}, transactions~\cite{bailis2014scalable}, and physical design~\cite{lefevre2014opportunistic}.
%The increased research focus parallels a major concern in industrial systems for incrementally updating pre-computed results and indices such as Google Percolator~\cite{percolator} and Twitter's Rainbird~\cite{rainbird}.
%The streaming community has also studied the view maintenance problem \cite{abadi2003aurora,golab2011consistency, golab2012scalable, he2010comet, ghanem2010supporting, KrishnamurthyFDFGLT10}. 
%In Spark Streaming, Zaharia et~al. studied how they could exploit in-memory materialization~\cite{zaharia2012discretized}, and in MonetDB, Liarou et~al. studied how ideas from columnar storage can be applied to enable real-time analytics \cite{liarou2012monetdb}.
%These works focus on correctness, consistency, and fault tolerance of materialized view maintenance.
%\svc proposes an alternative model where we allow approximation error (with guarantees) for queries on materialized views for vastly reduced maintenance time.
%In many decision problems, exact results are not needed as long as the probability of error is boundable. 


Sampling has been well studied in the context of query processing~\cite{AgarwalMPMMS13, olken1993random, garofalakis2001approximate}. 
Both the problems of efficiently sampling relations \cite{olken1993random} and processing complex queries \cite{agarwalknowing}, have been well studied. 
In \svc, we look at a new problem, where we efficiently sample from a maintenance strategy, a relational expression that updates a materialized view.
We generalize uniform sampling procedures to work in this new context using lineage \cite{DBLP:journals/vldb/CuiW03} and hashing.
We look the problem of approximate query processing \cite{AgarwalMPMMS13, agarwalknowing} from a different perspective by estimating a ``correction'' rather than estimating query results. 
Srinivasan and Carey studied a problem related to query correction which they called compensation-based query processing \cite{srinivasanC92} for concurrency control.
%This work was applied in the context of concurrency control.
However, this work did not consider applications when the correction was applied to a sample as in \svc.
%The sampling in \svc introduces new challenges such as sensitivity to outliers, questions of bias, and estimate optimality. 

In the context of materialized view maintenance, sampling has primarily been studied from the perspective of maintaining samples \cite{DBLP:conf/icde/OlkenR92}.
Similarly, in~\cite{joshi2008materialized}, Joshi and Jermaine studied indexed materialized views that are amenable to random sampling.
While similar in spirit (queries on the view are approximate), the goal of this work was to optimize query processing not address the cost of incremental maintenance.
There has been work using sampled views in a limited context of cardinality estimation \cite{larson2007cardinality}, which is the special case of our framework, namely, the \countfunc query.
Nirkhiwale et al. \cite{DBLP:journals/pvldb/NirkhiwaleDJ13}, studied an algebra for estimating confidence intervals in aggregate queries.
The objective of this work is not sampling efficiency, as in \svc, but estimation.
In a limited setting, where we consider only views constructed from select and project operators, \svc's hash pushdown will yield similar results to their model.

A well studied subject is data cleaning through provenance on materialized views.
For example, Wu and Madden \cite{DBLP:journals/pvldb/0002M13} studied explanations for outliers in group-by aggregate queries.
The technique used to trace the provenance of an outlier row in a result is very similar to the technique proposed in this work.
However, this work adddress a different cleaning problem from \svc.
In \svc, we look to find a relational expression that update an erroneous row such that it is correct.
In \cite{DBLP:journals/pvldb/0002M13}, the authors remove base data such that the row is no longer an outlier.
Also, Challamalla et al. \cite{DBLP:conf/sigmod/ChalamallaIOP14} proposed a technique for specifying errors as constraints on a materialized view and proposing changes to the base data such that these constraints can be satisfied.
In our setting, we do not know these constraints a priori and we would have to materialize the entire up-to-date view to be able to specify which rows are erroneous.
Finally, the work by Meliou et al. \cite{DBLP:conf/sigmod/MeliouGNS11} also explores tracing lineage through materialized views. 
Like \cite{DBLP:journals/pvldb/0002M13, DBLP:journals/pvldb/0002M13}, it requires an explicit specification of the errors and also does not suggest a cleaning operation to fix these errors.
While \svc has been proposed in the materialized view context, it subsumes the data cleaning work that we previously did in \cite{wang1999sample}.
\svc can be used as an underlying sampling module to extend these data cleaning operations to changing datasets or sampled relations.

%Sampling has been explored in the streaming community, and a similar idea of sampling from incoming updates has also been applied in stream processing~\cite{tatbul2003load, Garofalakis, rabkin2014aggregation}.
%While some of these works studied problems similar to materialization, for example, the JetStream project (Rabkin et al.) looks at how sampling can help with real-time analysis of aggregates.
%None of these works formally studied the class views that can benefit from sampling or formalized queries on these views.
%However, there are ideas from Rabkin et al. that could be applied in \svc in future work, for example, their description of coarsening operations in aggregates is very similar to our experiments with the ``roll-up'' queries in aggregate views.
%There are a variety of other efforts proposing storage efficient processing of aggregate queries on streams \cite{dobra2002processing, greenwald2001space} which is similar to our problem setting and motivation.

Finally, the theory community has has studied related problems.
There has been work on the maintenance of approximate histograms, synopses, and sketches ~\cite{gibbons1997fast, DBLP:journals/ftdb/CormodeGHJ12}, which closely resemble aggregate materialized views.
This work did not model queries on the approximate data structures as in \svc.
Furthermore, the goals of this line work (including techniques such as sketching and approximate counting) has been to reduce the required storage, not to reduce the required update time.
%There is also close relationship between sampling and probabilistic databases, and view maintenance and selection in the context of probabilistic databases have also been studied \cite{re2007materialized}.
%While this line work studies query processing on probabilistic views, it does not study their maintenance as in \svc.
\vspace{-1em}
\section{Limitations}\vspace{-.3em}\label{sec:disc}
While our experiments show that \svc works for a variety applications, there are a few limitations which we summarize in this section.
There are three primary limitations for \svc: class of queries, types of materialized views, and the specification of maintenance strategy.
In this work, we primarily focused on aggregate queries and showed that accuracy descreases as the selectivity of the query increases.
Sampled-based methods are fundamentally limited in the way they can support ``point lookup" queries that select a single row.
This is predicted by our theoretical result that accuracy decreases with $\frac{1}{p}$ where $p$ is the fraction of rows that satisfy the predicate.
In terms of more view definitions, \svc does not support views with ordering or ``top-k'' clauses, as our sampling assumes no ordering on the rows of the MV and it is not clear how sampling commutes with general ordering operations.
\svc also requires the maintenance strategy to be parameterized in terms of relational algebra which may not always be possible.
Tools like DBToaster achieve some of their performance gains by code generation and not specifying maintenance in SQL.

%\svc proposes a new approach for accurate query processing with MVs.
%Our results are promising and suggest many avenues for future work.
%In particular, we are interested in deeper exploration of the multiple MV setting.
%There are many interesting design problems such as given storage constraints and throughput demands, optimize sampling ratios over all views.
%Furthermore, there is an interesting challenge about queries that join mutliple sample MVs managed by \svc.
%We are also interested in the possibility of sharing computation between MVs and maintenance on views derived from other views.
%Finally, our results suggest relatively a straight forward implementation of adaptive selection of the parameters in \svc such as the view sampling ratio and the outlier index threshold.

\vspace{-1em}
\section{Conclusion}\label{conclusion}
\vspace{-.3em}
%In this paper, we propose a new framework, \svc, to address the staleness problem in materialized views.
Materialized view maintenance is often expensive, and in practice, immediate view maintenance is avoided due to its costs.
However, this leads to stale materialized views which have incorrect, missing, and superfluous rows.
In this work, we formalize the problem of staleness and view maintenance as a data cleaning problem.

\svc uses a sample-based data cleaning approach to get accurate query results that reflect the most recent data for a greatly reduced computational cost.
To achieve this, we significantly extended our prior work in data cleaning, SampleClean \cite{wang1999sample}, for efficient cleaning of stale MVs. 
This included processing a wider set of aggregate queries, handling missing data errors, and proving for which queries optimality of the estimates hold.
Another sigificant contribution of \svc is our outlier indexing approach which reduces the sensitivity of sampling to skewed data distributions.
We presented both empirical and theoretical results showing that our sample data cleaning approach is significantly less expensive than full view maintenance for a large class of materialized views, while still providing accurate aggregate query answers that reflect the most recent data.
We evaluate \svc on a real dataset of server logs from Conviva and the TPCD benchmark dataset, and our experiments confirm our theoretical results: (1) cleaning an MV sample is more efficient than full view maintenance, (2) the corrected results are more accurate than using the stale MV, and (3) SVC can be efficiently integrated with deferred maintenance leading to increased query accuracy. 





